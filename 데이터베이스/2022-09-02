[제약조건]
- primary key
- not null
- foreign key
- check

create table dept(
  did number(3) constraint dept_did_pk primary key,    => 제약조건 방법1. column level
  dname char(5),    => column 선언부
  loc number(3) not null,     
  constraint dept_did_pk primary key(did), => 제약조건 방법2. 별도 선언 table level
  constraint dept_dname_uk unique(dname),
  unique(dname) => 이렇게도 가능한데 웬만하면 위에처럼 적는게 좋아
)

- not null은 6번줄처럼 column level 방식밖에 사용 불가능

constraint 제약조건이름 제약조건유형(제약 조건을 부여할 컬럼 이름) : 제약조건을 생성할 때 선언
  -> 제약 조건 이름은 'table_col_약어' 이런식으로 회사에서 사용함

- foreign key는 
  constraint 제약조건이름 제약조건유형(제약조건을 부여할 컬럼 이름)
  references 참조대상테이블이름(참조대상컬럼이름)  => 참조대상 컬럼 이름은 pk, uk제약 조건이 설치가 된 컬럼만 참조할 수 있음
                                      => 참조할 컬럼과 참조 대상 컬럼은 타입과 길이가 같아야 한다.

- check는
  constraint 제약조건이름 check(조건문)
  ex) 0,1만을 선택하는 조건을 주고 싶으면 (컬럼 in(0,1))

- on delete casecade : 부모테이블과 참조 테이블에서 해당 행과 컬럼이 같이 삭제가 됨
- on delete set null : 부모 테이블에서 지워지고 참조 테이블에선 데이터만 null로 변경이 이루어짐

- save 파일명.sql : C:\oraclexe\app\oracle\product\11.2.0\server\bin 스크립트 파일로 이 경로에 저장할 수 있는데
                  여러개의 명령어를 저장할 수 있다.
                 => 실행은 @파일명.sql
                 
------------------------------------------------------    
[뷰]
: 하나 이상의 원본 테이블로부터 유도되어 일반 테이블처럼 조작할 수 있는 가상 테이블
=> create view 뷰이름 
   as 서브쿼리;


[table과 view의 차이]
- table
  : 물리적인 구조
  => 저장 공간 할당
  => data dictionary에 table구조, 제약조건 데이터를 저장
- view
  : 가짜/논리 테이블, 물리적인 구조가 없음
  => 저장 공간이 없음
  => data dictionary에 데이터 저장이 아닌 명령문 text를 저장
  => 조인할 때 테이블-테이블 / 테이블-뷰 / 뷰-뷰 조인도 가능
  
  
- create or replace view empvu80 서브쿼리 : 이미 만들어진 empvu80에 새로운 서브쿼리 결과로 덮어쓰겠다.

- 뷰 테이블 생성할 때 min(salary) 이런 함수 같이 쓰는 건 알리아스를 줘야해

[문제 예]
create view dept_sum_vu
as
select department_id, min(salary) as minsal, max(salary) as maxsal, avg(salary) as avgsal
from employees
group by department_id
  
Q. 부서별 최소급여를 받는 사원의 이름과 급여를 출력하세요
select e.department_id, e.last_name, e.salary, d.minsal
from employees e, dept_sum_vu d
where e.department_id = d.department_id
and e.salary = d.minsal

- rownum: 행이 출력이 되면 출력된 행의 번호 입력
  ex) select rownum, last_name, salary
      from employees
      where rownum < 4
      (rownum > 4는 불가능 왜냐면 데이터 같은게 저장이 된게 아니라서 처음부터 차례대로 나온 숫자만 사용이 가능해)
      
ex) 부서별 평균 급여가 많은 상위 4개 부서의 번호와 평균 급여를 출력
select department_id, avgsal
from (select department_id, avg(salary) as avgsal
	    from employees
	    group by department_id
	    order by avg(salary) desc)
	    where rownum < 5
-> 뷰 삭제한다고 테이블 변화가 일어나진 않음(영향 없음)

[데이터베이스 객체]
- 테이블, 뷰, 시퀀스

[시퀀스]
- 고유 번호를 자동으로 생성
- primary키를 생성하는 데 사용
- 공유 가능한 객체
- 응용 프로그램 코드를 대체

ex) create sequence dept_deptid_seq
                    increment by 10 -> 증가값
                    start with 120 -> 첫번째 생성 시퀀스 넘버
                    maxvalue 9999 -> 마지막 생성 시퀀스 넘버
                    nocache
                    nocycle; -> cycle 이면 주기가 다시 시작됨(primary key를 주려면 cycle일 때 중복되니 nocycle로 줘야 함)
    alter sequence dept_deptid_seq
                    increment by 10
                    maxvalue 9999
                    nocache
                    nocycle;
                    -> start with 120는 alter 명령어로 바꿀 수 없으니 시작 넘버를 바꾸고 싶으면 지우고 다시 만들어야 함
-> insert로 시퀀스 넣을 때 시퀀스 넣을 컬럼 부분에 dept_deptid_seq.nextval 입력해줌                    
-> 만든 거 롤백 시켰다가 다시 생성하면 그 전에 만들었던 번호는 다시 생성이 되지 않음
-> 시퀀스 지운다고 테이블 데이터가 같이 삭제되진 않음(영향 없음)


[parse]
1. 검증
2. 실행계획
3. 실행

- 2번은 table_full_scan으로 순차 검색을 해야 해
  -> 문제점이 있는데 백만건 다음에 있는 만건만 검색하고 싶은데 순차 검색이기 때문에 백만건부터 검색을 하게 돼
  => 이런 문제점을 인덱스를 활용해서 해결 함
  
[인덱스]
- 설치가 된 컬럼의 데이터를 별도의 저장공간을 할당해서 거기다가 컬럼의 데이터를 저장함(오름차순으로)
 
