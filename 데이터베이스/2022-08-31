[문제 풀이]
1. 이름이 DAVIES인 사람보다 후에 고용된 사원들의 이름 및 고용일자를 출력하시오. 고용일자를 역순으로 출력하시오.
  => select last_name, hire_date
     from employees
     where hire_date > (select hire_date
                        from employees
                        where last_name = 'Davies')
                        order by hire_date desc
     -> where절 비교할 때 테이블에 명시된 컬럼 형식을 잘 보고 적기
     -> Davies가 여러명일 경우 > 가 아닌 >any를 적어야 함

2. King을 매니저로 두고 있는 모든 사원들의 이름 및 급여를 출력하시오.
  => select last_name, salary, manager_id
     from employees
     where manager_id in (select employee_id
     from employees
     where last_name = 'King')
     
3. 회사 전체 평균 급여보다 더 많이 받는 사원들 중 이름에 u가 있는 사원들이 근무하는 부서에서 근무하는 사원들의 사번, 이름 및 급여를 출력하시오
  => select employee_id, last_name, salary
     from employees
     where department_id in ( select department_id
                              from employees
                              where salary > (select avg(salary) 
                                              from employees) 
                              and last_name like '%u%')

====================================================================================
[DML : 데이터 조작어]
: 삽입, 삭제, 갱신

[정보처리]
1. 일괄 처리 방식 : 작업도를 모아서 한꺼번에 처리하는 것
2. 실시간 온라인 처리
3. 분산 처리

[트랜잭션]
: 작업의 단위(모음), 일괄 처리를 하기 위한 기준

[커밋]
: 정상적인 트랜잭션이 수행이 되었을 때 내용을 데이터베이스에 영구히 저장(DB의 현시점으로 유지)
  -> 자동(auto) commit : 새로운 트랜잭션이 수행되면 트랜잭션이 자동 커밋
                 프로그램이 정상이면 종료
  -> 수동 commit : commit 명령어 직접 해주기

[롤백]
: 비정상적인 트랜잭션이 수행이 되었을 때 트랜잭션 이전 시점으로 취소(무결성 보장)
  -> 자동(auto) rollback : 프로그램이 비정상 종료될 때
  -> 수동 rollback : rollback 명령어 직접 해주기
 

DML -> 문장 전체 1개 T
DDL/DCL -> 문장 하나가 1개 T / 실행과 동시에 auto commit

[insert]
  => 행 단위
  => 이 구문으로는 한 번에 한 행만 추가된다.
  => insert into table_name
     values (삽입할 데이터 값 명시) : all column data 전부 삽입
  => insert into table_name(column_name)
     values (삽입할 데이터 값 명시) : 명시된 column에만 data 삽입
  -> into절에 명시된 컬럼의 개수와 순서, 데이터 타입과 길이에 맞게 values의 입력 데이터가 1:1로 매칭
  
  
[delete]
  => 행 단위
[update]
  => 열 단위
